{"name":"PluginDescriptionFile","comment":"This type is the runtime-container for the information in the plugin.yml.\n All plugins must have a respective plugin.yml. For plugins written in java\n using the standard plugin loader, this file must be in the root of the jar\n file.\n \u003cp\u003e\n When Bukkit loads a plugin, it needs to know some basic information about\n it. It reads this information from a YAML file, \u0027plugin.yml\u0027. This file\n consists of a set of attributes, each defined on a new line and with no\n indentation.\n \u003cp\u003e\n Every (almost* every) method corresponds with a specific entry in the\n plugin.yml. These are the \u003cb\u003erequired\u003c/b\u003e entries for every plugin.yml:\n \u003cul\u003e\n \u003cli\u003e{@link #getName()} - \u003ccode\u003ename\u003c/code\u003e\n \u003cli\u003e{@link #getVersion()} - \u003ccode\u003eversion\u003c/code\u003e\n \u003cli\u003e{@link #getMain()} - \u003ccode\u003emain\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n Failing to include any of these items will throw an exception and cause the\n server to ignore your plugin.\n \u003cp\u003e\n This is a list of the possible yaml keys, with specific details included in\n the respective method documentations:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe description of the plugin.yml layout\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eMethod\u003c/th\u003e\n     \u003cth\u003eSummary\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getName()}\u003c/td\u003e\n     \u003ctd\u003eThe unique name of plugin\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getVersion()}\u003c/td\u003e\n     \u003ctd\u003eA plugin revision identifier\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003emain\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getMain()}\u003c/td\u003e\n     \u003ctd\u003eThe plugin\u0027s initial class file\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cbr\u003e\u003ccode\u003eauthors\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getAuthors()}\u003c/td\u003e\n     \u003ctd\u003eThe plugin contributors\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getDescription()}\u003c/td\u003e\n     \u003ctd\u003eHuman readable plugin summary\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ewebsite\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getWebsite()}\u003c/td\u003e\n     \u003ctd\u003eThe URL to the plugin\u0027s site\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eprefix\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getPrefix()}\u003c/td\u003e\n     \u003ctd\u003eThe token to prefix plugin log entries\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eload\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getLoad()}\u003c/td\u003e\n     \u003ctd\u003eThe phase of server-startup this plugin will load during\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edepend\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getDepend()}\u003c/td\u003e\n     \u003ctd\u003eOther required plugins\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003esoftdepend\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getSoftDepend()}\u003c/td\u003e\n     \u003ctd\u003eOther plugins that add functionality\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eloadbefore\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getLoadBefore()}\u003c/td\u003e\n     \u003ctd\u003eThe inverse softdepend\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ecommands\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getCommands()}\u003c/td\u003e\n     \u003ctd\u003eThe commands the plugin will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermissions\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getPermissions()}\u003c/td\u003e\n     \u003ctd\u003eThe permissions the plugin will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edefault-permission\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getPermissionDefault()}\u003c/td\u003e\n     \u003ctd\u003eThe default {@link Permission#getDefault() default} permission\n         state for defined {@link #getPermissions() permissions} the plugin\n         will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eawareness\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getAwareness()}\u003c/td\u003e\n     \u003ctd\u003eThe concepts that the plugin acknowledges\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eapi-version\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getAPIVersion()}\u003c/td\u003e\n     \u003ctd\u003eThe API version which this plugin was programmed against\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n A plugin.yml example:\u003cblockquote\u003e\u003cpre\u003e\nname: Inferno\nversion: 1.4.1\ndescription: This plugin is so 31337. You can set yourself on fire.\n# We could place every author in the authors list, but chose not to for illustrative purposes\n# Also, having an author distinguishes that person as the project lead, and ensures their\n# name is displayed first\nauthor: CaptainInflamo\nauthors: [Cogito, verrier, EvilSeph]\nwebsite: http://www.curse.com/server-mods/minecraft/myplugin\n\nmain: com.captaininflamo.bukkit.inferno.Inferno\ndepend: [NewFire, FlameWire]\napi-version: 1.13\n\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    usage: Syntax error! Simply type /\u0026lt;command\u0026gt; to ignite yourself.\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases: [burning_deaths, burningDeaths]\n    permission: inferno.burningdeaths\n    usage: |\n      /\u0026lt;command\u0026gt; [player]\n      Example: /\u0026lt;command\u0026gt; - see how many times you have burned to death\n      Example: /\u0026lt;command\u0026gt; CaptainIce - see how many times CaptainIce has burned to death\n\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n      inferno.burningdeaths.others: true\n  inferno.flagrate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n  inferno.burningdeaths.others:\n    description: Allows you to see how many times others have burned to death\n    default: op\n    children:\n      inferno.burningdeaths: true\n\u003c/pre\u003e\u003c/blockquote\u003e","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"PluginDescriptionFile","qualifiedName":"org.bukkit.plugin.PluginDescriptionFile","dimension":"","elementType":{},"package":"org.bukkit.plugin","superclass":"java.lang.Object","interfaces":[],"isAbstract":false,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"PluginDescriptionFile","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.InputStream)","flatSignature":"(InputStream)","parameters":[{"name":"stream","type":{"isPrimitive":false,"simpleName":"InputStream","qualifiedName":"java.io.InputStream","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PluginDescriptionFile","comment":"Loads a PluginDescriptionFile from the specified reader","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.io.Reader)","flatSignature":"(Reader)","parameters":[{"name":"reader","type":{"isPrimitive":false,"simpleName":"Reader","qualifiedName":"java.io.Reader","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"PluginDescriptionFile","comment":"Creates a new PluginDescriptionFile with the given detailed","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"(java.lang.String, java.lang.String, java.lang.String)","flatSignature":"(String, String, String)","parameters":[{"name":"pluginName","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"pluginVersion","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"mainClass","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]}],"fields":[],"methods":[{"name":"getName","comment":"Gives the name of the plugin. This name is a unique identifier for\n plugins.\n \u003cul\u003e\n \u003cli\u003eMust consist of all alphanumeric characters, underscores, hyphon,\n     and period (a-z,A-Z,0-9, _.-). Any other character will cause the\n     plugin.yml to fail loading.\n \u003cli\u003eUsed to determine the name of the plugin\u0027s data folder. Data\n     folders are placed in the ./plugins/ directory by default, but this\n     behavior should not be relied on. {@link Plugin#getDataFolder()}\n     should be used to reference the data folder.\n \u003cli\u003eIt is good practice to name your jar the same as this, for example\n     \u0027MyPlugin.jar\u0027.\n \u003cli\u003eCase sensitive.\n \u003cli\u003eThe is the token referenced in {@link #getDepend()}, {@link\n     #getSoftDepend()}, and {@link #getLoadBefore()}.\n \u003cli\u003eUsing spaces in the plugin\u0027s name is deprecated.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003ename\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003ename: MyPlugin\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getVersion","comment":"Gives the version of the plugin.\n \u003cul\u003e\n \u003cli\u003eVersion is an arbitrary string, however the most common format is\n     MajorRelease.MinorRelease.Build (eg: 1.4.1).\n \u003cli\u003eTypically you will increment this every time you release a new\n     feature or bug fix.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eversion\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eversion: 1.4.1\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getMain","comment":"Gives the fully qualified name of the main class for a plugin. The\n format should follow the {@link ClassLoader#loadClass(String)} syntax\n to successfully be resolved at runtime. For most plugins, this is the\n class that extends {@link JavaPlugin}.\n \u003cul\u003e\n \u003cli\u003eThis must contain the full namespace including the class file\n     itself.\n \u003cli\u003eIf your namespace is \u003ccode\u003eorg.bukkit.plugin\u003c/code\u003e, and your class\n     file is called \u003ccode\u003eMyPlugin\u003c/code\u003e then this must be\n     \u003ccode\u003eorg.bukkit.plugin.MyPlugin\u003c/code\u003e\n \u003cli\u003eNo plugin can use \u003ccode\u003eorg.bukkit.\u003c/code\u003e as a base package for\n     \u003cb\u003eany class\u003c/b\u003e, including the main class.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003emain\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003emain: org.bukkit.plugin.MyPlugin\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDescription","comment":"Gives a human-friendly description of the functionality the plugin\n provides.\n \u003cul\u003e\n \u003cli\u003eThe description can have multiple lines.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edescription\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003edescription: This plugin is so 31337. You can set yourself on fire.\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLoad","comment":"Gives the phase of server startup that the plugin should be loaded.\n \u003cul\u003e\n \u003cli\u003ePossible values are in {@link PluginLoadOrder}.\n \u003cli\u003eDefaults to {@link PluginLoadOrder#POSTWORLD}.\n \u003cli\u003eCertain caveats apply to each phase.\n \u003cli\u003eWhen different, {@link #getDepend()}, {@link #getSoftDepend()}, and\n     {@link #getLoadBefore()} become relative in order loaded per-phase.\n     If a plugin loads at \u003ccode\u003eSTARTUP\u003c/code\u003e, but a dependency loads\n     at \u003ccode\u003ePOSTWORLD\u003c/code\u003e, the dependency will not be loaded before\n     the plugin is loaded.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eload\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eload: STARTUP\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PluginLoadOrder","qualifiedName":"org.bukkit.plugin.PluginLoadOrder","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAuthors","comment":"Gives the list of authors for the plugin.\n \u003cul\u003e\n \u003cli\u003eGives credit to the developer.\n \u003cli\u003eUsed in some server error messages to provide helpful feedback on\n     who to contact when an error occurs.\n \u003cli\u003eA bukkit.org forum handle or email address is recommended.\n \u003cli\u003eIs displayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003cli\u003e\u003ccode\u003eauthors\u003c/code\u003e must be in \u003ca\n     href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this has two entries, \u003ccode\u003eauthor\u003c/code\u003e and\n \u003ccode\u003eauthors\u003c/code\u003e.\n \u003cp\u003e\n Single author example:\n \u003cblockquote\u003e\u003cpre\u003eauthor: CaptainInflamo\u003c/pre\u003e\u003c/blockquote\u003e\n Multiple author example:\n \u003cblockquote\u003e\u003cpre\u003eauthors: [Cogito, verrier, EvilSeph]\u003c/pre\u003e\u003c/blockquote\u003e\n When both are specified, author will be the first entry in the list, so\n this example:\n \u003cblockquote\u003e\u003cpre\u003eauthor: Grum\nauthors:\n- feildmaster\n- amaranth\u003c/pre\u003e\u003c/blockquote\u003e\n Is equivilant to this example:\n \u003cpre\u003eauthors: [Grum, feildmaster, aramanth]\u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWebsite","comment":"Gives the plugin\u0027s or plugin\u0027s author\u0027s website.\n \u003cul\u003e\n \u003cli\u003eA link to the Curse page that includes documentation and downloads\n     is highly recommended.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003ewebsite\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003ewebsite: http://www.curse.com/server-mods/minecraft/myplugin\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDepend","comment":"Gives a list of other plugins that the plugin requires.\n \u003cul\u003e\n \u003cli\u003eUse the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n \u003cli\u003eIf any plugin listed here is not found, your plugin will fail to\n     load at startup.\n \u003cli\u003eIf multiple plugins list each other in \u003ccode\u003edepend\u003c/code\u003e,\n     creating a network with no individual plugin does not list another\n     plugin in the \u003ca\n     href\u003dhttps://en.wikipedia.org/wiki/Circular_dependency\u003enetwork\u003c/a\u003e,\n     all plugins in that network will fail.\n \u003cli\u003e\u003ccode\u003edepend\u003c/code\u003e must be in must be in \u003ca\n     href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edepend\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003edepend:\n- OnePlugin\n- AnotherPlugin\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getSoftDepend","comment":"Gives a list of other plugins that the plugin requires for full\n functionality. The {@link PluginManager} will make best effort to treat\n all entries here as if they were a {@link #getDepend() dependency}, but\n will never fail because of one of these entries.\n \u003cul\u003e\n \u003cli\u003eUse the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n \u003cli\u003eWhen an unresolvable plugin is listed, it will be ignored and does\n     not affect load order.\n \u003cli\u003eWhen a circular dependency occurs (a network of plugins depending\n     or soft-dependending each other), it will arbitrarily choose a\n     plugin that can be resolved when ignoring soft-dependencies.\n \u003cli\u003e\u003ccode\u003esoftdepend\u003c/code\u003e must be in \u003ca\n     href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003esoftdepend\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003esoftdepend: [OnePlugin, AnotherPlugin]\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLoadBefore","comment":"Gets the list of plugins that should consider this plugin a\n soft-dependency.\n \u003cul\u003e\n \u003cli\u003eUse the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n \u003cli\u003eThe plugin should load before any other plugins listed here.\n \u003cli\u003eSpecifying another plugin here is strictly equivalent to having the\n     specified plugin\u0027s {@link #getSoftDepend()} include {@link\n     #getName() this plugin}.\n \u003cli\u003e\u003ccode\u003eloadbefore\u003c/code\u003e must be in \u003ca\n     href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eloadbefore\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003eloadbefore:\n- OnePlugin\n- AnotherPlugin\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPrefix","comment":"Gives the token to prefix plugin-specific logging messages with.\n \u003cul\u003e\n \u003cli\u003eThis includes all messages using {@link Plugin#getLogger()}.\n \u003cli\u003eIf not specified, the server uses the plugin\u0027s {@link #getName()\n     name}.\n \u003cli\u003eThis should clearly indicate what plugin is being logged.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eprefix\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eprefix: ex-why-zee\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getCommands","comment":"Gives the map of command-name to command-properties. Each entry in this\n map corresponds to a single command and the respective values are the\n properties of the command. Each property, \u003ci\u003ewith the exception of\n aliases\u003c/i\u003e, can be defined at runtime using methods in {@link\n PluginCommand} and are defined here only as a convenience.\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe command section\u0027s description\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eMethod\u003c/th\u003e\n     \u003cth\u003eType\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n     \u003cth\u003eExample\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setDescription(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eA user-friendly description for a command. It is useful for\n         documentation purposes as well as in-game help.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edescription: Set yourself on fire\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ealiases\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setAliases(List)}\u003c/td\u003e\n     \u003ctd\u003eString or \u003ca\n         href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eList\u003c/a\u003e of\n         strings\u003c/td\u003e\n     \u003ctd\u003eAlternative command names, with special usefulness for commands\n         that are already registered. \u003ci\u003eAliases are not effective when\n         defined at runtime,\u003c/i\u003e so the plugin description file is the\n         only way to have them properly defined.\n         \u003cp\u003e\n         Note: Command aliases may not have a colon in them.\u003c/td\u003e\n     \u003ctd\u003eSingle alias format:\n         \u003cblockquote\u003e\u003cpre\u003ealiases: combust_me\u003c/pre\u003e\u003c/blockquote\u003e or\n         multiple alias format:\n         \u003cblockquote\u003e\u003cpre\u003ealiases: [combust_me, combustMe]\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermission\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setPermission(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eThe name of the {@link Permission} required to use the command.\n         A user without the permission will receive the specified\n         message (see {@linkplain\n         PluginCommand#setPermissionMessage(String) below}), or a\n         standard one if no specific message is defined. Without the\n         permission node, no {@link\n         PluginCommand#setExecutor(CommandExecutor) CommandExecutor} or\n         {@link PluginCommand#setTabCompleter(TabCompleter)\n         TabCompleter} will be called.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003epermission: inferno.flagrate\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermission-message\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setPermissionMessage(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003e\u003cul\u003e\n         \u003cli\u003eDisplayed to a player that attempts to use a command, but\n             does not have the required permission. See {@link\n             PluginCommand#getPermission() above}.\n         \u003cli\u003e\u0026lt;permission\u0026gt; is a macro that is replaced with the\n             permission node required to use the command.\n         \u003cli\u003eUsing empty quotes is a valid way to indicate nothing\n             should be displayed to a player.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003epermission-message: You do not have /\u0026lt;permission\u0026gt;\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eusage\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setUsage(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eThis message is displayed to a player when the {@link\n         PluginCommand#setExecutor(CommandExecutor)} {@linkplain\n         CommandExecutor#onCommand(CommandSender,Command,String,String[])\n         returns false}. \u0026lt;command\u0026gt; is a macro that is replaced\n         the command issued.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003eusage: Syntax error! Perhaps you meant /\u0026lt;command\u0026gt; PlayerName?\u003c/pre\u003e\u003c/blockquote\u003e\n         It is worth noting that to use a colon in a yaml, like\n         \u003ccode\u003e`usage: Usage: /god [player]\u0027\u003c/code\u003e, you need to\n         \u003ca href\u003d\"http://yaml.org/spec/current.html#id2503232\"\u003esurround\n         the message with double-quote\u003c/a\u003e:\n         \u003cblockquote\u003e\u003cpre\u003eusage: \"Usage: /god [player]\"\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n The commands are structured as a hiearchy of \u003ca\n href\u003d\"http://yaml.org/spec/current.html#id2502325\"\u003enested mappings\u003c/a\u003e.\n The primary (top-level, no intendentation) node is\n `\u003ccode\u003ecommands\u003c/code\u003e\u0027, while each individual command name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n \u003cp\u003e\n Here is an example bringing together the piecemeal examples above, as\n well as few more definitions:\u003cblockquote\u003e\u003cpre\u003e\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    permission-message: You do not have /\u0026lt;permission\u0026gt;\n    usage: Syntax error! Perhaps you meant /\u0026lt;command\u0026gt; PlayerName?\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases:\n    - burning_deaths\n    - burningDeaths\n    permission: inferno.burningdeaths\n    usage: |\n      /\u0026lt;command\u0026gt; [player]\n      Example: /\u0026lt;command\u0026gt; - see how many times you have burned to death\n      Example: /\u0026lt;command\u0026gt; CaptainIce - see how many times CaptainIce has burned to death\n  # The next command has no description, aliases, etc. defined, but is still valid\n  # Having an empty declaration is useful for defining the description, permission, and messages from a configuration dynamically\n  apocalypse:\n\u003c/pre\u003e\u003c/blockquote\u003e\n Note: Command names may not have a colon in their name.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Map","qualifiedName":"java.util.Map","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPermissions","comment":"Gives the list of permissions the plugin will register at runtime,\n immediately proceding enabling. The format for defining permissions is\n a map from permission name to properties. To represent a map without\n any specific property, empty \u003ca\n href\u003d\"http://yaml.org/spec/current.html#id2502702\"\u003ecurly-braces\u003c/a\u003e (\n \u003ccode\u003e\u0026#123;\u0026#125;\u003c/code\u003e ) may be used (as a null value is not\n accepted, unlike the {@link #getCommands() commands} above).\n \u003cp\u003e\n A list of optional properties for permissions:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe permission section\u0027s description\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n     \u003cth\u003eExample\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003ePlaintext (user-friendly) description of what the permission\n         is for.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edescription: Allows you to set yourself on fire\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eThe default state for the permission, as defined by {@link\n         Permission#getDefault()}. If not defined, it will be set to\n         the value of {@link PluginDescriptionFile#getPermissionDefault()}.\n         \u003cp\u003e\n         For reference:\u003cul\u003e\n         \u003cli\u003e\u003ccode\u003etrue\u003c/code\u003e - Represents a positive assignment to\n             {@link Permissible permissibles}.\n         \u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e - Represents no assignment to {@link\n             Permissible permissibles}.\n         \u003cli\u003e\u003ccode\u003eop\u003c/code\u003e - Represents a positive assignment to\n             {@link Permissible#isOp() operator permissibles}.\n         \u003cli\u003e\u003ccode\u003enotop\u003c/code\u003e - Represents a positive assignment to\n             {@link Permissible#isOp() non-operator permissibiles}.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edefault: true\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003echildren\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eAllows other permissions to be set as a {@linkplain\n         Permission#getChildren() relation} to the parent permission.\n         When a parent permissions is assigned, child permissions are\n         respectively assigned as well.\n         \u003cul\u003e\n         \u003cli\u003eWhen a parent permission is assigned negatively, child\n             permissions are assigned based on an inversion of their\n             association.\n         \u003cli\u003eWhen a parent permission is assigned positively, child\n             permissions are assigned based on their association.\n         \u003c/ul\u003e\n         \u003cp\u003e\n         Child permissions may be defined in a number of ways:\u003cul\u003e\n         \u003cli\u003eChildren may be defined as a \u003ca\n             href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003elist\u003c/a\u003e of\n             names. Using a list will treat all children associated\n             positively to their parent.\n         \u003cli\u003eChildren may be defined as a map. Each permission name maps\n             to either a boolean (representing the association), or a\n             nested permission definition (just as another permission).\n             Using a nested definition treats the child as a positive\n             association.\n         \u003cli\u003eA nested permission definition must be a map of these same\n             properties. To define a valid nested permission without\n             defining any specific property, empty curly-braces (\n             \u003ccode\u003e\u0026#123;\u0026#125;\u003c/code\u003e ) must be used.\n          \u003cli\u003eA nested permission may carry it\u0027s own nested permissions\n              as children, as they may also have nested permissions, and\n              so forth. There is no direct limit to how deep the\n              permission tree is defined.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003eAs a list:\n         \u003cblockquote\u003e\u003cpre\u003echildren: [inferno.flagrate, inferno.burningdeaths]\u003c/pre\u003e\u003c/blockquote\u003e\n         Or as a mapping:\n         \u003cblockquote\u003e\u003cpre\u003echildren:\n  inferno.flagrate: true\n  inferno.burningdeaths: true\u003c/pre\u003e\u003c/blockquote\u003e\n         An additional example showing basic nested values can be seen\n         \u003ca href\u003d\"doc-files/permissions-example_plugin.yml\"\u003ehere\u003c/a\u003e.\n         \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n The permissions are structured as a hiearchy of \u003ca\n href\u003d\"http://yaml.org/spec/current.html#id2502325\"\u003enested mappings\u003c/a\u003e.\n The primary (top-level, no intendentation) node is\n `\u003ccode\u003epermissions\u003c/code\u003e\u0027, while each individual permission name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n \u003cp\u003e\n Here is an example using some of the properties:\u003cblockquote\u003e\u003cpre\u003e\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n  inferno.flagate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n\u003c/pre\u003e\u003c/blockquote\u003e\n Another example, with nested definitions, can be found \u003ca\n href\u003d\"doc-files/permissions-example_plugin.yml\"\u003ehere\u003c/a\u003e.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPermissionDefault","comment":"Gives the default {@link Permission#getDefault() default} state of\n {@link #getPermissions() permissions} registered for the plugin.\n \u003cul\u003e\n \u003cli\u003eIf not specified, it will be {@link PermissionDefault#OP}.\n \u003cli\u003eIt is matched using {@link PermissionDefault#getByName(String)}\n \u003cli\u003eIt only affects permissions that do not define the\n     \u003ccode\u003edefault\u003c/code\u003e node.\n \u003cli\u003eIt may be any value in {@link PermissionDefault}.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edefault-permission\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003edefault-permission: NOT_OP\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PermissionDefault","qualifiedName":"org.bukkit.permissions.PermissionDefault","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAwareness","comment":"Gives a set of every {@link PluginAwareness} for a plugin. An awareness\n dictates something that a plugin developer acknowledges when the plugin\n is compiled. Some implementions may define extra awarenesses that are\n not included in the API. Any unrecognized\n awareness (one unsupported or in a future version) will cause a dummy\n object to be created instead of failing.\n \n \u003cul\u003e\n \u003cli\u003eCurrently only supports the enumerated values in {@link\n     PluginAwareness.Flags}.\n \u003cli\u003eEach awareness starts the identifier with bang-at\n     (\u003ccode\u003e!@\u003c/code\u003e).\n \u003cli\u003eUnrecognized (future / unimplemented) entries are quietly replaced\n     by a generic object that implements PluginAwareness.\n \u003cli\u003eA type of awareness must be defined by the runtime and acknowledged\n     by the API, effectively discluding any derived type from any\n     plugin\u0027s classpath.\n \u003cli\u003e\u003ccode\u003eawareness\u003c/code\u003e must be in \u003ca\n     href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eawareness\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eawareness:\n- !@UTF8\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e Although unknown versions of some future awareness are\n gracefully substituted, previous versions of Bukkit (ones prior to the\n first implementation of awareness) will fail to load a plugin that\n defines any awareness.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Set","qualifiedName":"java.util.Set","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getFullName","comment":"Returns the name of a plugin, including the version. This method is\n provided for convenience; it uses the {@link #getName()} and {@link\n #getVersion()} entries.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getAPIVersion","comment":"Gives the API version which this plugin is designed to support. No\n specific format is guaranteed.\n \u003cul\u003e\n \u003cli\u003eRefer to release notes for supported API versions.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eapi-version\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eapi-version: 1.13\u003c/pre\u003e\u003c/blockquote\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getClassLoaderOf","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"save","comment":"Saves this PluginDescriptionFile to the given writer","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(java.io.Writer)","flatSignature":"(Writer)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"writer","type":{"isPrimitive":false,"simpleName":"Writer","qualifiedName":"java.io.Writer","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRawName","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}