{"name":"MetadataStoreBase","comment":"","isClass":true,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":true,"isPrimitive":false,"simpleName":"MetadataStoreBase","qualifiedName":"org.bukkit.metadata.MetadataStoreBase","dimension":"","elementType":{},"package":"org.bukkit.metadata","superclass":"java.lang.Object","interfaces":[],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[{"name":"MetadataStoreBase","comment":"","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":true,"isField":false,"isMethod":false,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","parameters":[],"typeParameters":[]}],"fields":[],"methods":[{"name":"setMetadata","comment":"Adds a metadata value to an object. Each metadata value is owned by a\n specific {@link Plugin}. If a plugin has already added a metadata value\n to an object, that value will be replaced with the value of {@code\n newMetadataValue}. Multiple plugins can set independent values for the\n same {@code metadataKey} without conflict.\n \u003cp\u003e\n Implementation note: I considered using a {@link\n java.util.concurrent.locks.ReadWriteLock} for controlling access to\n {@code metadataMap}, but decided that the added overhead wasn\u0027t worth\n the finer grained access control.\n \u003cp\u003e\n Bukkit is almost entirely single threaded so locking overhead shouldn\u0027t\n pose a problem.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.lang.String, org.bukkit.metadata.MetadataValue)","flatSignature":"(T, String, MetadataValue)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subject","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"metadataKey","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"newMetadataValue","type":{"isPrimitive":false,"simpleName":"MetadataValue","qualifiedName":"org.bukkit.metadata.MetadataValue","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getMetadata","comment":"Returns all metadata values attached to an object. If multiple\n have attached metadata, each will value will be included.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.lang.String)","flatSignature":"(T, String)","returnType":{"isPrimitive":false,"simpleName":"List","qualifiedName":"java.util.List","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subject","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"metadataKey","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"hasMetadata","comment":"Tests to see if a metadata attribute has been set on an object.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.lang.String)","flatSignature":"(T, String)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subject","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"metadataKey","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"removeMetadata","comment":"Removes a metadata item owned by a plugin from a subject.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(T, java.lang.String, org.bukkit.plugin.Plugin)","flatSignature":"(T, String, Plugin)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"subject","type":{"isPrimitive":false,"simpleName":"T","qualifiedName":"T","dimension":"","elementType":{},"typeVariable":{"name":"T","bounds":[]}}},{"name":"metadataKey","type":{"isPrimitive":false,"simpleName":"String","qualifiedName":"java.lang.String","dimension":"","elementType":{}}},{"name":"owningPlugin","type":{"isPrimitive":false,"simpleName":"Plugin","qualifiedName":"org.bukkit.plugin.Plugin","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"invalidateAll","comment":"Invalidates all metadata in the metadata store that originates from the\n given plugin. Doing this will force each invalidated metadata item to\n be recalculated the next time it is accessed.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.plugin.Plugin)","flatSignature":"(Plugin)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":false,"isDefault":false,"isStatic":false,"parameters":[{"name":"owningPlugin","type":{"isPrimitive":false,"simpleName":"Plugin","qualifiedName":"org.bukkit.plugin.Plugin","dimension":"","elementType":{}}}],"typeParameters":[]}],"typeParameters":[{"name":"T","bounds":[]}],"enumConstants":[]}