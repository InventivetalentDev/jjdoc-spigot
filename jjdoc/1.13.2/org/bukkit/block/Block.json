{"name":"Block","comment":"Represents a block. This is a live object, and only one Block may exist for\n any given location in a world. The state of the block may change\n concurrently to your own handling of it; use block.getState() to get a\n snapshot state of a block which will not be modified.\n\n \u003cbr\u003e\n Note that parts of this class which require access to the world at large\n (i.e. lighting and power) may not be able to be safely accessed during world\n generation when used in cases like BlockPhysicsEvent!!!!","isClass":false,"isInterface":true,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":false,"isOrdinaryClass":false,"isPrimitive":false,"simpleName":"Block","qualifiedName":"org.bukkit.block.Block","dimension":"","elementType":{},"package":"org.bukkit.block","interfaces":["org.bukkit.metadata.Metadatable"],"isAbstract":true,"isStatic":false,"innerClasses":[],"isInnerClass":false,"constructors":[],"fields":[],"methods":[{"name":"getData","comment":"Gets the metadata for this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBlockData","comment":"Gets the complete block data for this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BlockData","qualifiedName":"org.bukkit.block.data.BlockData","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getRelative","comment":"Gets the block at the given offsets","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(int, int, int)","flatSignature":"(int, int, int)","returnType":{"isPrimitive":false,"simpleName":"Block","qualifiedName":"org.bukkit.block.Block","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"modX","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"modY","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}},{"name":"modZ","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRelative","comment":"Gets the block at the given face\n \u003cp\u003e\n This method is equal to getRelative(face, 1)","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.BlockFace)","flatSignature":"(BlockFace)","returnType":{"isPrimitive":false,"simpleName":"Block","qualifiedName":"org.bukkit.block.Block","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"face","type":{"isPrimitive":false,"simpleName":"BlockFace","qualifiedName":"org.bukkit.block.BlockFace","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getRelative","comment":"Gets the block at the given distance of the given face\n \u003cp\u003e\n For example, the following method places water at 100,102,100; two\n blocks above 100,100,100.\n\n \u003cpre\u003e\n Block block \u003d world.getBlockAt(100, 100, 100);\n Block shower \u003d block.getRelative(BlockFace.UP, 2);\n shower.setType(Material.WATER);\n \u003c/pre\u003e","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.BlockFace, int)","flatSignature":"(BlockFace, int)","returnType":{"isPrimitive":false,"simpleName":"Block","qualifiedName":"org.bukkit.block.Block","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"face","type":{"isPrimitive":false,"simpleName":"BlockFace","qualifiedName":"org.bukkit.block.BlockFace","dimension":"","elementType":{}}},{"name":"distance","type":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getType","comment":"Gets the type of this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Material","qualifiedName":"org.bukkit.Material","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLightLevel","comment":"Gets the light level between 0-15","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLightFromSky","comment":"Get the amount of light at this block from the sky.\n \u003cp\u003e\n Any light given from other sources (such as blocks like torches) will\n be ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLightFromBlocks","comment":"Get the amount of light at this block from nearby blocks.\n \u003cp\u003e\n Any light given from other sources (such as the sun) will be ignored.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"byte","qualifiedName":"byte","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getWorld","comment":"Gets the world which contains this Block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"World","qualifiedName":"org.bukkit.World","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getX","comment":"Gets the x-coordinate of this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getY","comment":"Gets the y-coordinate of this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getZ","comment":"Gets the z-coordinate of this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocation","comment":"Gets the Location of the block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Location","qualifiedName":"org.bukkit.Location","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getLocation","comment":"Stores the location of the block in the provided Location object.\n \u003cp\u003e\n If the provided Location is null this method does nothing and returns\n null.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.Location)","flatSignature":"(Location)","returnType":{"isPrimitive":false,"simpleName":"Location","qualifiedName":"org.bukkit.Location","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"loc","type":{"isPrimitive":false,"simpleName":"Location","qualifiedName":"org.bukkit.Location","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getChunk","comment":"Gets the chunk which contains this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Chunk","qualifiedName":"org.bukkit.Chunk","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setBlockData","comment":"Sets the complete data for this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.data.BlockData)","flatSignature":"(BlockData)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"data","type":{"isPrimitive":false,"simpleName":"BlockData","qualifiedName":"org.bukkit.block.data.BlockData","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setBlockData","comment":"Sets the complete data for this block\n\n \u003cbr\u003e\n Note that applyPhysics \u003d false is not in general safe. It should only be\n used when you need to avoid triggering a physics update of neighboring\n blocks, for example when creating a {@link Bisected} block. If you are\n using a custom populator, then this parameter may also be required to\n prevent triggering infinite chunk loads on border blocks. This method\n should NOT be used to \"hack\" physics by placing blocks in impossible\n locations. Such blocks are liable to be removed on various events such as\n world upgrades. Furthermore setting large amounts of such blocks in close\n proximity may overload the server physics engine if an update is\n triggered at a later point. If this occurs, the resulting behavior is\n undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.data.BlockData, boolean)","flatSignature":"(BlockData, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"data","type":{"isPrimitive":false,"simpleName":"BlockData","qualifiedName":"org.bukkit.block.data.BlockData","dimension":"","elementType":{}}},{"name":"applyPhysics","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setType","comment":"Sets the type of this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.Material)","flatSignature":"(Material)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"Material","qualifiedName":"org.bukkit.Material","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"setType","comment":"Sets the type of this block\n\n \u003cbr\u003e\n Note that applyPhysics \u003d false is not in general safe. It should only be\n used when you need to avoid triggering a physics update of neighboring\n blocks, for example when creating a {@link Bisected} block. If you are\n using a custom populator, then this parameter may also be required to\n prevent triggering infinite chunk loads on border blocks. This method\n should NOT be used to \"hack\" physics by placing blocks in impossible\n locations. Such blocks are liable to be removed on various events such as\n world upgrades. Furthermore setting large amounts of such blocks in close\n proximity may overload the server physics engine if an update is\n triggered at a later point. If this occurs, the resulting behavior is\n undefined.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.Material, boolean)","flatSignature":"(Material, boolean)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"type","type":{"isPrimitive":false,"simpleName":"Material","qualifiedName":"org.bukkit.Material","dimension":"","elementType":{}}},{"name":"applyPhysics","type":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getFace","comment":"Gets the face relation of this block compared to the given block.\n \u003cp\u003e\n For example: \n \u003cpre\u003e{@code\n Block current \u003d world.getBlockAt(100, 100, 100);\n Block target \u003d world.getBlockAt(100, 101, 100);\n\n current.getFace(target) \u003d\u003d BlockFace.Up;\n }\u003c/pre\u003e\n \u003cbr\u003e\n If the given block is not connected to this block, null may be returned","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.Block)","flatSignature":"(Block)","returnType":{"isPrimitive":false,"simpleName":"BlockFace","qualifiedName":"org.bukkit.block.BlockFace","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"block","type":{"isPrimitive":false,"simpleName":"Block","qualifiedName":"org.bukkit.block.Block","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getState","comment":"Captures the current state of this block. You may then cast that state\n into any accepted type, such as Furnace or Sign.\n \u003cp\u003e\n The returned object will never be updated, and you are not guaranteed\n that (for example) a sign is still a sign after you capture its state.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BlockState","qualifiedName":"org.bukkit.block.BlockState","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getBiome","comment":"Returns the biome that this block resides in","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Biome","qualifiedName":"org.bukkit.block.Biome","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"setBiome","comment":"Sets the biome that this block resides in","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.Biome)","flatSignature":"(Biome)","returnType":{"isPrimitive":true,"simpleName":"void","qualifiedName":"void","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"bio","type":{"isPrimitive":false,"simpleName":"Biome","qualifiedName":"org.bukkit.block.Biome","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBlockPowered","comment":"Returns true if the block is being powered by Redstone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isBlockIndirectlyPowered","comment":"Returns true if the block is being indirectly powered by Redstone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isBlockFacePowered","comment":"Returns true if the block face is being powered by Redstone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.BlockFace)","flatSignature":"(BlockFace)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"face","type":{"isPrimitive":false,"simpleName":"BlockFace","qualifiedName":"org.bukkit.block.BlockFace","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isBlockFaceIndirectlyPowered","comment":"Returns true if the block face is being indirectly powered by Redstone.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.BlockFace)","flatSignature":"(BlockFace)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"face","type":{"isPrimitive":false,"simpleName":"BlockFace","qualifiedName":"org.bukkit.block.BlockFace","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBlockPower","comment":"Returns the redstone power being provided to this block face","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.block.BlockFace)","flatSignature":"(BlockFace)","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"face","type":{"isPrimitive":false,"simpleName":"BlockFace","qualifiedName":"org.bukkit.block.BlockFace","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBlockPower","comment":"Returns the redstone power being provided to this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"int","qualifiedName":"int","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isEmpty","comment":"Checks if this block is empty.\n \u003cp\u003e\n A block is considered empty when {@link #getType()} returns {@link\n Material#AIR}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"isLiquid","comment":"Checks if this block is liquid.\n \u003cp\u003e\n A block is considered liquid when {@link #getType()} returns {@link\n Material#WATER} or {@link Material#LAVA}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getTemperature","comment":"Gets the temperature of this block.\n \u003cp\u003e\n If the raw biome temperature without adjusting for height effects is\n required then please use {@link World#getTemperature(int, int)}.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getHumidity","comment":"Gets the humidity of the biome of this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getPistonMoveReaction","comment":"Returns the reaction of the block when moved by a piston","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"PistonMoveReaction","qualifiedName":"org.bukkit.block.PistonMoveReaction","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"breakNaturally","comment":"Breaks the block and spawns items as if a player had digged it","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"breakNaturally","comment":"Breaks the block and spawns items as if a player had digged it with a\n specific tool","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.inventory.ItemStack)","flatSignature":"(ItemStack)","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"tool","type":{"isPrimitive":false,"simpleName":"ItemStack","qualifiedName":"org.bukkit.inventory.ItemStack","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getDrops","comment":"Returns a list of items which would drop by destroying this block","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"getDrops","comment":"Returns a list of items which would drop by destroying this block with\n a specific tool","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.inventory.ItemStack)","flatSignature":"(ItemStack)","returnType":{"isPrimitive":false,"simpleName":"Collection","qualifiedName":"java.util.Collection","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"tool","type":{"isPrimitive":false,"simpleName":"ItemStack","qualifiedName":"org.bukkit.inventory.ItemStack","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"isPassable","comment":"Checks if this block is passable.\n \u003cp\u003e\n A block is passable if it has no colliding parts that would prevent\n players from moving through it.\n \u003cp\u003e\n Examples: Tall grass, flowers, signs, etc. are passable, but open doors,\n fence gates, trap doors, etc. are not because they still have parts that\n can be collided with.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":true,"simpleName":"boolean","qualifiedName":"boolean","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]},{"name":"rayTrace","comment":"Performs a ray trace that checks for collision with this specific block\n in its current state using its precise collision shape.","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"(org.bukkit.Location, org.bukkit.util.Vector, double, org.bukkit.FluidCollisionMode)","flatSignature":"(Location, Vector, double, FluidCollisionMode)","returnType":{"isPrimitive":false,"simpleName":"RayTraceResult","qualifiedName":"org.bukkit.util.RayTraceResult","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[{"name":"start","type":{"isPrimitive":false,"simpleName":"Location","qualifiedName":"org.bukkit.Location","dimension":"","elementType":{}}},{"name":"direction","type":{"isPrimitive":false,"simpleName":"Vector","qualifiedName":"org.bukkit.util.Vector","dimension":"","elementType":{}}},{"name":"maxDistance","type":{"isPrimitive":true,"simpleName":"double","qualifiedName":"double","dimension":"","elementType":{}}},{"name":"fluidCollisionMode","type":{"isPrimitive":false,"simpleName":"FluidCollisionMode","qualifiedName":"org.bukkit.FluidCollisionMode","dimension":"","elementType":{}}}],"typeParameters":[]},{"name":"getBoundingBox","comment":"Gets the approximate bounding box for this block.\n \u003cp\u003e\n This isn\u0027t exact as some blocks {@link org.bukkit.block.data.type.Stairs}\n contain many bounding boxes to establish their complete form.\n\n Also, the box may not be exactly the same as the collision shape (such as\n cactus, which is 16/16 of a block with 15/16 collisional bounds).\n\n This method will return an empty bounding box if the geometric shape of\n the block is empty (such as air blocks).","isClass":false,"isInterface":false,"isEnum":false,"isEnumConstant":false,"isConstructor":false,"isField":false,"isMethod":true,"isOrdinaryClass":false,"signature":"()","flatSignature":"()","returnType":{"isPrimitive":false,"simpleName":"BoundingBox","qualifiedName":"org.bukkit.util.BoundingBox","dimension":"","elementType":{}},"isAbstract":true,"isDefault":false,"isStatic":false,"parameters":[],"typeParameters":[]}],"typeParameters":[],"enumConstants":[]}